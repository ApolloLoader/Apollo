buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        gradlePluginPortal()

        maven { url("https://jitpack.io/") }
        maven { url("https://maven.minecraftforge.net") }
    }

    dependencies {
        classpath("com.github.ReplayMod:ForgeGradle:ceb83c0:all")
        classpath("com.github.xcfrg:MixinGradle:0.6-SNAPSHOT")
    }
}

plugins {
    id("com.github.johnrengelman.shadow") version("7.1.0")
    id("org.jetbrains.kotlin.jvm") version("1.6.10")
    id("net.kyori.blossom") version("1.3.0")
    id("maven-publish")
    id("java")
}

apply(plugin: "net.minecraftforge.gradle.tweaker-client")
apply(plugin: "org.spongepowered.mixin")

configurations {
    compile
    implementation.extendsFrom(compile)
}

archivesBaseName = projectName
version = projectVersion
group = projectGroup

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = "UTF-8"

minecraft {
    version = "1.8.9"
    runDir = "run"
    mappings = "stable_22"
    tweakClass = "xyz.unifycraft.apollo.mixins.ApolloTweaker"
}

blossom {
    replaceToken("@VERSION@", projectVersion)
    replaceToken("@NAME@", projectName)
    replaceToken("@ID@", projectId)
}

repositories {
    mavenCentral()

    maven { url("https://jitpack.io/") }
    maven { url("https://repo.spongepowered.org/maven/") }
    maven { url("https://repo.sk1er.club/repository/maven-public/") }

    mavenLocal()
}

configurations {
    shade
    implementation.extendsFrom(shade)
}

dependencies {
    shade('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1-native-mt')
    shade("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    shade(api("com.github.KevinPriv:keventbus:master-SNAPSHOT"))
    shade(api("com.squareup.okhttp3:okhttp:4.9.3"))
    shade(api("gg.essential:elementa-1.8.9-forge:441"))
    shade("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "gson"
        exclude module: "commons-io"
    }
}

sourceSets {
    main {
        output.resourcesDir = java.classesDirectory
    }
}

mixin {
    defaultObfuscationEnv(notch)
    add(sourceSets.main, "mixins.apollo.refmap.json")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName.toLowerCase()
            group = projectGroup
            version = project.version

            from(components.java)
        }
    }
}

def mcVersion = "1.8.9"
processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property("version", projectVersion)
    inputs.property("mcversion", mcVersion)
    inputs.property("id", projectId)

    filesMatching("mod.${projectId}.json") {
        expand(
                "name": projectName,
                "version": projectVersion,
                "id": projectId,
        )
    }

    filesMatching("mixins.${projectId}.json") {
        expand(
                "id": projectId
        )
    }
}

jar.finalizedBy(shadowJar)
